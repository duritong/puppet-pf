#	$OpenBSD: pf.conf,v 1.31 2006/01/30 12:20:31 camield Exp $
#
# See pf.conf(5) and /usr/share/pf for syntax and examples.
# Remember to set net.inet.ip.forwarding=1 and/or net.inet6.ip6.forwarding=1
# in /etc/sysctl.conf if packets are to be forwarded between interfaces.

### VARIABLEN ###

Ext = "rl0"            # Device an dem das Internet angeschlossen ist 
Int = "fxp0"      # Device an dem das interne Netz haengt
Dmz = "rl1"      # dmz device
Vpn = "tun1"
IntNet = "192.168.1.0/24"      # Adressraum des internen Netzes
DmzNet = "10.0.0.0/8" 
#ExtIp="62.12.160.178"
#ExtPublicIp1="62.12.167.9"
ExtPublicIp2="62.12.167.10"
ExtPublicIp3="62.12.167.11"
ExtPublicIp4="62.12.167.12"
ExtPublicIp5="62.12.167.13"
ExtPublicIp6="62.12.167.14"
ExtIPs="{" $ExtPublicIp2 $ExtPublicIp3 $ExtPublicIp4 $ExtPublicIp5 $ExtPublicIp6 "}"
RouterIP = "192.168.1.1"       # IP Adresse des Routers
RouterIPDmz = "10.0.0.1"       # IP Adresse des Routers
Loop = "lo0"                   # Loopback Device
Bridge="bridge0"

# Ports die geoeffnet werden sollen
SSHBarricada = "{2222}"
SSHIrunaTCP = "{ssh}"
SSHIndyCHTest = "{3333}"
SSHImmerda1 = "{4444}"
SSHDonostia = "{65210}"
HTTPrfd = "{www,https}"
Dns="{domain}"
MLDONKEYiruna = "{4662,4665:4666,6881:6889,12157,13489,6969}" 
DonkeyGasteiz = "{4662, 4672}"
FTP="{ftp,49999 >< 50201}"
IMs="{6890:6900}"
PortVPN="1194"
NTP="{ntp}"
ssh_ports="{ssh,2222,3333,4444,65200:65299}"
im_ports="{5222,5223,5269}"

bt_ports="{6881:6889}"

puppet_port="{8140}"

### hosts ###

HostRfd = "192.168.1.50"
HostHome = "192.168.1.51"
HostIruna = "192.168.1.52"
HostIndyCHTest = "192.168.1.70"
HostBilbo = "192.168.1.10"
HostDonostia = "192.168.1.11"
HostGasteiz="192.168.1.190"
HostBolivia="192.168.1.31"
HostImmerda1="192.168.1.80"
NtpDmzHosts="{10.0.0.2 10.0.0.3}"

PuppetHosts="{ 212.103.72.224/27 195.141.111.121 81.62.11.158 }"

### OPTIONS ###
# Macht Statistiken fuer die DSL-Verbindung (pfctl -s info)
set loginterface $Ext 
#set loginterface $Int
# Beendet inaktive Verbindungen schneller - geringerer Speicherverbrauch.
#set optimization aggressive

# Fragmentierte Pakete saeubern
#scrub in all

# enable queueing on the external interface to control traffic going to
# the Internet. use the priq scheduler to control only priorities. set
# the bandwidth to 610Kbps to get the best performance out of the TCP
# ACK queue.

#altq on $Ext priq bandwidth 1.1Mb queue { std_out, ssh_im_out, immerda_out, dns_out, tcp_ack_out }

# define the parameters for the child queues.
# std_out      - the standard queue. any filter rule below that does not
#                explicitly specify a queue will have its traffic added
#                to this queue.
# ssh_im_out   - interactive SSH and various instant message traffic.
# dns_out      - DNS queries.
# tcp_ack_out  - TCP ACK packets with no data payload.

#queue std_out     priq(default)
#queue ssh_im_out  priority 3 
#queue immerda_out  priority 4 
#queue dns_out     priority 5
#queue tcp_ack_out priority 6

# enable queueing on the internal interface to control traffic coming in
# from the Internet. use the cbq scheduler to control bandwidth. max
# bandwidth is 8Mbps.

#altq on $Int cbq bandwidth 8.8Mb queue { std_in, immerda_in, ssh_im_in, dns_in }
#altq on $Dmz cbq bandwidth 8Mb queue { std_in, immerda_in, ssh_im_in, dns_in }
#altq on $Vpn cbq bandwidth 8Mb queue { std_in, immerda_in, ssh_im_in, dns_in }

# define the parameters for the child queues.
# std_in      - the standard queue. any filter rule below that does not
#               explicitly specify a queue will have its traffic added
#               to this queue.
# ssh_im_in   - interactive SSH and various instant message traffic.
# dns_in      - DNS replies.

#queue std_in    bandwidth 6.6Mb cbq(default)
#queue immerda_in bandwidth 200Kb priority 2 cbq(borrow)
#queue ssh_im_in bandwidth 1.8Mb priority 3 cbq(borrow)
#queue dns_in    bandwidth 120Kb priority 5

### NAT & FORWARD ###

no nat from $DmzNet to $IntNet
no nat from $IntNet to $DmzNet
no nat on $Int from $IntNet to $IntNet
no nat on $Dmz from $DmzNet to $DmzNet

# NAT aktivieren (unter Linux als Masquerading bekannt)
#Internes auf 9
#Dmz auf 10
#Mail/Home auf 11
#Immerda(1) auf 12
#Backup auf 13
#nix auf 14
nat on $Ext from $HostHome to any -> $ExtPublicIp3 
nat on $Ext from $HostRfd to any -> $ExtPublicIp3 
nat on $Ext from $HostIruna to any -> $ExtPublicIp3 
nat on $Ext from $HostIndyCHTest to any -> $ExtPublicIp3 
nat on $Ext from $HostImmerda1 to any -> $ExtPublicIp4 
nat on $Ext from $HostDonostia to any -> $ExtPublicIp5 
nat on $Ext from $DmzNet to any -> $ExtPublicIp2 
nat on $Ext from any to any -> $ExtPublicIp2  

# 
# Rule  0(NAT)
# no need to translate
# between DMZ and 
# internal net
# 
#no nat from { $IntNet $DmzNet } to {$DmzNet $IntNet} 

#services nach innen
# 9 nix
# 10 nix 
# 11 normale services
# 12 immerda(1)
# 13 backup
# 14 unused

rdr on $Ext proto {tcp} from any to $ExtPublicIp3 port $SSHIrunaTCP -> $HostIruna 
rdr on $Ext proto {tcp} from any to $ExtPublicIp4 port ssh -> $HostImmerda1 
rdr on $Ext proto {tcp} from any to $ExtPublicIp5 port ssh -> $HostDonostia 
rdr on $Ext proto {tcp udp} from any to $ExtPublicIp3 port $bt_ports -> $HostIruna
rdr on { $Ext $Int $Dmz } proto {tcp} from any to $ExtPublicIp3 port $HTTPrfd -> $HostRfd 
rdr on $Ext proto {tcp} from any to $HostIndyCHTest port $SSHIndyCHTest -> $HostIndyCHTest 
rdr on $Ext proto {tcp udp} from any to $ExtPublicIp2 port $IMs -> $HostGasteiz 
rdr on $Ext proto {tcp udp} from any to $ExtPublicIp2 port $DonkeyGasteiz -> $HostGasteiz 

#puppet
rdr on $Ext proto {tcp} from $PuppetHosts to $ExtPublicIp4 port $puppet_port -> $HostImmerda1


#rdr on { $Int $Dmz } inet proto tcp from !$HostImmerda1 to any port www -> 127.0.0.1 port 3128
### FILTER ###

# Zum Debuggen....
#pass quick all             # Alles durchlassen

# Generelle Block Regel
block all

# IP Spoofing verhindern
antispoof for { $Ext $Int $Vpn $Dmz }

# Loopback Device darf alles
pass quick on $Loop

#bridge und Vpn lassen wir durch
pass quick on { $Bridge $Vpn} all 

#raus darf überall alle nur queuen wir noch
block out on $Ext all
pass  out on $Ext inet proto tcp from $ExtIPs to any label OutStd
pass  out on $Ext inet proto { udp icmp } from $ExtIPs to any label OutStd
pass  out on $Ext inet proto { tcp udp } from $ExtIPs to any port domain label OutDns
pass  out on $Ext inet proto tcp from $ExtIPs to any port $ssh_ports label OutSSH
pass  out on $Ext inet proto tcp from { $ExtPublicIp4 $ExtPublicIp5 } to any label OutImmerda

# filter rules for internal outbound
block out on { $Int $Dmz $Vpn } all
pass  out on { $Int $Dmz $Vpn } from any to { $IntNet $DmzNet } label OutStd
pass  out on { $Int $Vpn $Dmz }  proto { tcp udp } from any port domain to { $IntNet $DmzNet } label OutDns
pass  out on { $Int $Vpn $Dmz } proto tcp from any port $ssh_ports to { $IntNet $DmzNet } label OutSSH
pass  out on { $Int $Vpn $Dmz } proto tcp from any to { $IntNet $DmzNet } port $ssh_ports  label OutSSH
pass  out on { $Int $Vpn $Dmz } proto tcp from any to { $HostDonostia $HostImmerda1 }  label OutImmerda
pass  out on { $Int $Vpn $Dmz } proto tcp from any port $im_ports to $IntNet label OutIm
 
# Active FTP erlauben
#pass in quick on $Ext inet proto tcp from any to any port > 49151 user proxy 

# Ping akzeptieren (ablehnen ist uebrigends wenig sinnvoll)
pass in quick on { $Ext $Int $Vpn } inet proto icmp all icmp-type 8 code 0 label Pings 
pass in quick on $Dmz inet proto icmp from $DmzNet to !$IntNet label Pings

#nat ports öffnen
pass quick on $Ext proto {tcp} from any to $HostIruna port $SSHIrunaTCP label InIrunaSSH
pass quick on $Ext proto {tcp} from any to $HostImmerda1 port ssh label InImmerda1SSH
pass quick on $Ext proto {tcp} from any to $HostDonostia port ssh label InDonostiaSSH
pass quick on $Ext proto {tcp udp} from any to $HostIruna port $bt_ports label InIrunaTorrent
pass quick on { $Ext $Int $Dmz } proto {tcp} from any to $HostRfd port $HTTPrfd label InRfdHTTP
pass quick on $Ext proto {tcp} from any to $HostIndyCHTest port ssh label InIndyCHSSH
pass quick on $Ext proto {tcp udp} from any to $HostGasteiz port $IMs label InIMs
pass quick on $Ext proto {tcp udp} from any to $HostGasteiz port $DonkeyGasteiz label InDonkey

#puppet
pass quick on $Ext proto {tcp} from $PuppetHosts to $HostImmerda1 port $puppet_port label InPuppet

# Ports nach aussen oeffnen
pass in quick on $Ext inet proto tcp from any to $ExtPublicIp2 port $SSHBarricada label SSHBarricada
pass in quick on $Ext inet proto {tcp, udp} from any to $ExtPublicIp3 port $FTP label FTP 
pass in quick on $Dmz inet proto {tcp, udp} from any to $RouterIPDmz port $FTP label FTP 

pass in on { $Int $Dmz} inet proto tcp from any to 127.0.0.1 port 3128

#Vom IntNet her raus darf alles
pass in quick on $Int label OutIntern 

#Dmz ports öffnen
pass  in quick on $Dmz inet proto {tcp udp} from $DmzNet to $HostHome port $Dns label DmzDNS
pass in quick on $Dmz inet proto {tcp udp } from $DmzNet to !$IntNet port ssh label DmzOutSSH
pass in quick on $Dmz inet proto {tcp udp } from $DmzNet to !$IntNet port { www https } label DmzOutHTTP
pass in quick on $Dmz inet proto {tcp udp } from $DmzNet to !$IntNet port { 2525 993 995 } label DmzOutMail
pass in quick on $Dmz inet proto {tcp udp } from $DmzNet to !$IntNet port { 5223 } label DmzOutJabber
pass in quick on $Dmz inet proto {tcp udp } from $NtpDmzHosts to !$IntNet port $NTP label DmzOutNTP

#vpn von Dmz
pass in quick on $Dmz inet proto udp from $DmzNet to $RouterIPDmz port $PortVPN label DmzVPN 

#vpn von aussen
#pass in quick on $Ext inet proto udp from any to $ExtIp port $PortVPN label ExternalVPN 
 
